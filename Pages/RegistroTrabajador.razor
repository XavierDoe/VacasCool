@using MudBlazor;
@using System.ComponentModel.DataAnnotations
@using VacasCool.Data
@inject TrabajadorService TrabajadorService

<MudDialog>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Nombre" HelperText="Max. 8 characters"
                            @bind-Value="model.Nombre" For="@(() => model.Nombre)" />
                            <MudTextField Label="Edad" Class="mt-3"
                            @bind-Value="model.Edad" For="@(() => model.Edad)" InputType="InputType.Number" />
                            <MudTextField Label="Salario" Class="mt-3"
                            @bind-Value="model.Salario" For="@(() => model.Salario)" InputType="InputType.Number" />
                            <MudTextField Label="Sexo" HelperText="Choose a strong password" Class="mt-3"
                            @bind-Value="model.Sexo" For="@(() => model.Sexo)" InputType="InputType.Text" />
                            <MudTextField Label="Historial" HelperText="Repeat the password" Class="mt-3"
                            @bind-Value="model.Historial" For="@(() => model.Historial)" InputType="InputType.Text" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="ml-auto">Registrar</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                        @if (success)
                        {
                            <MudText Color="Color.Success">Success</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Fill out the form correctly to see the success message.
                    </MudText>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    private Trabajador trab = new Trabajador();

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Nombre { get; set; }

        [Required]
        public double Edad { get; set; }

        [Required]
        [StringLength(1, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 1)]
        public string Sexo { get; set; }

        [Required]
        public string Historial { get; set; }

        [Required]
        public double Salario { get; set; }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (TrabajadorService.getTrabajador() != null)
            {
                trab = TrabajadorService.getTrabajador();
                model.Nombre = trab.Nombre;
                model.Edad = (double)trab.Edad;
                model.Salario = (double)trab.Salario;
                model.Sexo = trab.Sexo;
                model.Historial = trab.HistoriaEmpleo;
                TrabajadorService.SetTrabajador(null);
            }
        }
        catch (Exception e)
        {
        }
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}