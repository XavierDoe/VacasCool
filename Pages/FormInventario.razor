@using MudBlazor;
@using System.ComponentModel.DataAnnotations
@using VacasCool.Data
@inject InventarioService InventarioService
@inject ISnackbar SnackbarService

<MudDialog>
    <DialogContent>
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Nombre"
                @bind-Value="model.Nombre" For="@(() => model.Nombre)" />
                <MudTextField Label="Cantidad" Class="mt-3"
                @bind-Value="model.Cantidad" For="@(() => model.Cantidad)" InputType="InputType.Number" />
                <MudTextField Label="Precio" Class="mt-3"
                @bind-Value="model.Precio" For="@(() => model.Precio)" InputType="InputType.Number" />
                <MudItem xs="12" sm="6" md="4">
                    <MudAutocomplete T="string" Label="Tipo de Artículo" ResetValueOnEmptyText="true" @bind-Value="model.tipoArticulo" SearchFunc="@Search1" />
                </MudItem>
                <MudTextField @ref="multilineReference" T="string" Label="Descripción" @bind-Value="model.Descripcion" Variant="Variant.Filled" Lines="3" Adornment="Adornment.End" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" OnClick="@Guardar" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="ml-auto">Registrar</MudButton>
            </MudCardActions>
        </MudCard>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private MudTextField<string> multilineReference;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    private Inventario trab = new Inventario();

    public class RegisterAccountForm
    {
        [Required]
        public string Nombre { get; set; }

        [Required]
        public int Cantidad { get; set; }

        [Required]
        public string tipoArticulo { get; set; }

        public string Descripcion { get; set; }

        [Required]
        public double Precio { get; set; }

    }

    private string[] states =
    {
        "Alimentos", "Medicina", "Carnes", "Plantas", "Equipos", "Suministros",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (InventarioService.GetInventario() != null)
            {
                trab = InventarioService.GetInventario();
                model.Nombre = trab.NombreArticulo;
                model.Cantidad = (int)trab.Cantidad;
                model.Precio = (double)trab.precio;
                model.tipoArticulo = trab.tipoArticulo;
                model.Descripcion = trab.descripcion;
                InventarioService.SetInventario(null);
            }
        }
        catch (Exception e)
        {
        }
    }

    private async Task Guardar()
    {
        Inventario inv = new Inventario();
        inv.NombreArticulo = model.Nombre;
        inv.precio = model.Precio;
        inv.tipoArticulo = model.tipoArticulo;
        inv.descripcion = model.Descripcion;
        inv.Cantidad = model.Cantidad;
        int result = await InventarioService.GuardarDatos(inv);
        if (result == 200)
        {
            SnackbarService.Add<MudChip>(new Dictionary<string, object>() {
            { "Text", "Guardado exitoso." },
            { "Color", Color.Success }
        });
        } else
        {
            SnackbarService.Add<MudChip>(new Dictionary<string, object>() {
            { "Text", "Ha ocurrido un error al guardar." },
            { "Color", Color.Error }
        });
        }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}