@page "/fetchdataVacas"
@using MudBlazor;
@using System.Net.Http.Json
@using VacasCool.Data;
@inject VacaService VacaService;
@inject IDialogService DialogService;
@inject HttpClient httpClient;

<PageTitle>Vacas</PageTitle>

<MudDataGrid T="Vaca" MultiSelection="false" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Lista de Vacas</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Vaca" />
        <PropertyColumn Property="x => x.Raza" Title="Raza" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Edad" Title="Edad" />    
        <PropertyColumn Property="x => x.Padre" Title="Padre" />
        <PropertyColumn Property="x => x.Peso" Title="Peso" />
        <PropertyColumn Property="x => x.HistoriaVac" Title="Historial de vacunacion" />
        <PropertyColumn Property="x => x.InfoParto" Title="Informacion de parto" />
        <PropertyColumn Property="x => x.Vivo" Title="Estado" />
        

        <TemplateColumn CellClass="d-flex justify-left" Title="Acción" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudIconButton @onclick="@( () => Actualizar(context.Item) )" Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Vaca" />
    </PagerContent>
</MudDataGrid>
<MudButton @onclick="OpenDialog2" Variant="Variant.Filled" Color="Color.Primary">
    Registrar Vaca
</MudButton>

@code {
    private IEnumerable<Vaca> Elements = new List<Vaca>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private List<Vaca> inventario = new List<Vaca>();
    private Vaca selectedItem1 = null;
    private HashSet<Vaca> selectedItems = new HashSet<Vaca>();
    // custom sort by name length
    private Func<Vaca, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Raza.Length;
        else
            return x.Raza;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Vaca, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{x.Peso}".Contains(_searchString))
            return true;


        if (x.Padre.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.InfoParto.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.HistoriaVac.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Edad}".Contains(_searchString))
            return true;

        if ($"{x.Vivo}".Contains(_searchString))
            return true;
        
        return false;
    };

    private void OpenDialog2()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };

        DialogService.Show<FormVacas>("Formulario vacas", closeOnEscapeKey);
    }

    protected override async Task OnInitializedAsync()
    {
        var url = "https://vacas20231113212142.azurewebsites.net/Vacas";
        Elements = await VacaService.ObtenerElementos(url);
    } 

    

    private void Actualizar(Vaca select)
    {
        if (select != null){
        
            VacaService.SetVaca(select);

            
        }
        OpenDialog2();
    }

    void SelectedItemsChanged(HashSet<Vaca> items)
    {
        selectedItem1 = items.First();
    }


}