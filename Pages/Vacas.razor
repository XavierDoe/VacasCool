@page "/fetchdataVacas"
@using VacasCool.Data
@inject VacaService vacaService

<PageTitle>Vacas</PageTitle>

<h1>Vacas</h1>

<p>Listado de Vacas</p>

@if (vacas.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <Div Margin="Margin.IsAuto.OnX">
        <Card>
            <CardHeader Padding="Padding.Is0.FromBottom">
                <CardTitle Flex="Flex.Column.AlignItems.Start">
                    <Span TextWeight="TextWeight.Bold">Vea el estado y relación de las vacas</Span>
                </CardTitle>
            </CardHeader>
            <CardBody>
                <Table Borderless>
                 <TableHeader>
                     <TableRow>
                         <TableHeaderCell>Raza</TableHeaderCell>
                         <TableHeaderCell>Edad (Meses)</TableHeaderCell>
                         <TableHeaderCell>Padre</TableHeaderCell>
                         <TableHeaderCell>Peso (Kg)</TableHeaderCell>
                         <TableHeaderCell>Estado</TableHeaderCell>
                         <TableHeaderCell>Acciones</TableHeaderCell>
                     </TableRow>
                 </TableHeader>
                 @foreach (var vaca in vacas)
                    {
                        <TableBody>
                            <TableRow>
                                <TableRowCell>
                                    @SimpleText("#", vaca.Raza)
                                </TableRowCell>
                                <TableRowCell>
                                    @SimpleLink("#", (int) vaca.Edad)
                                </TableRowCell>
                                <TableRowCell>
                                    @SimpleText("#", vaca.Padre)
                                </TableRowCell>
                                <TableRowCell>
                                    @Peso((double) vaca.Peso)
                                </TableRowCell>
                                <TableRowCell>
                                   @estado(vaca.Vivo)
                                </TableRowCell>
                                <TableRowCell TextAlignment="TextAlignment.Start">
                                    <Button Type="ButtonType.Link" Color="Color.Light" Size="Size.Small">
                                        <Icon Name="IconName.Edit" />
                                    </Button>
                                    <Button Type="ButtonType.Link" Color="Color.Light" Size="Size.Small">
                                        <Icon Name="IconName.Delete" />
                                    </Button>
                                </TableRowCell>
                            </TableRow>
                        </TableBody>
                    }
                </Table>
         </CardBody>
     </Card>
 </Div>
}

@code {
    private List<Vaca> vacas = new List<Vaca>();
    protected override async Task OnInitializedAsync()
    {
        var url = "https://vacas20231113212142.azurewebsites.net/Vacas";
        vacas = await vacaService.ObtenerElementos(url);
    }
    private RenderFragment SimpleLink(string to, int label) => __builder =>
    {
        <Anchor To="@to" TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">@label</Anchor>
        @if (label >= 12)
        {
            <Span TextColor="TextColor.Muted" Display="Display.Block" Style="font-size: 0.85rem;">@($"{label / 12} años")</Span>
        }
    };

    private RenderFragment SimpleText(string to, string label) => __builder =>
    {
        <Anchor To="@to" TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">@label</Anchor>
    };

    private RenderFragment Peso(double peso) => __builder =>
    {
        <Span TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">@($"{peso}")</Span>
    };

    private RenderFragment estado(bool status) => __builder =>
    {
        if (status)
        {
            <Badge Color="Color.Success">Viva</Badge>
        } else
        {
            <Badge Color="Color.Danger">Muerta</Badge>
        }
    };
}
