@page "/inventario"
@using MudBlazor;
@using System.Net.Http.Json
@using VacasCool.Data;
@inject InventarioService InventarioService;
@inject IDialogService DialogService
@inject HttpClient httpClient

<PageTitle>Inventario</PageTitle>

<MudDataGrid T="Inventario" MultiSelection="false" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Lista de Articulos en la Empresa</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Inventario" />
        <PropertyColumn Property="x => x.NombreArticulo" Title="Nombre del Artículo" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.tipoArticulo" Title="Tipo de Artículo" />
        <PropertyColumn Property="x => x.precio" Title="Precio" />
        <TemplateColumn CellClass="d-flex justify-left" Title="Acción" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudIconButton @onclick="@( () => Actualizar(context.Item) )" Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Inventario" />
    </PagerContent>
</MudDataGrid>
 <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
<MudButton @onclick="OpenDialog" Variant="Variant.Outlined" FullWidth="true" Style="height: 60px;">
    Guardar un nuevo artículo
</MudButton>

@code {
    private IEnumerable<Inventario> Elements = new List<Inventario>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private List<Inventario> inventario = new List<Inventario>();
    private Inventario selectedItem1 = null;
    private HashSet<Inventario> selectedItems = new HashSet<Inventario>();
    // custom sort by name length
    private Func<Inventario, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.NombreArticulo.Length;
        else
            return x.NombreArticulo;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Inventario, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.descripcion.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.NombreArticulo.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.tipoArticulo.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.precio}".Contains(_searchString))
            return true;

        return false;
    };

    private void OpenDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };

        DialogService.Show<FormInventario>("Formulario Artículo", closeOnEscapeKey);
    }

    protected override async Task OnInitializedAsync()
    {
        var url = "https://vacas20231113212142.azurewebsites.net/Inventario";
        Elements = await InventarioService.ObtenerElementos(url);
    }

    private void Actualizar(Inventario select)
    {
        if (select != null)
        {
            InventarioService.SetInventario(select);
        }
        OpenDialog();
    }
    void SelectedItemsChanged(HashSet<Inventario> items)
    {
        selectedItem1 = items.First();
    }
}