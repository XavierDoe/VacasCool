@page "/"
@using MudBlazor;
@using VacasCool.Data
@inject InventarioService inventarioService;
@inject ISnackbar SnackbarService

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>Shop Homepage - Start Bootstrap Template</title>
    <!-- Favicon-->
    <link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
    <!-- Bootstrap icons-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" rel="stylesheet" />
    <!-- Core theme CSS (includes Bootstrap)-->
    <link href="css/styles.css" rel="stylesheet" />
</head>
<style>
    .custom-card {
        background: linear-gradient(to bottom, #191717, #2B2B2B); /* Cambiar los colores a tu preferencia */
        color: white; /* Cambiar el color del texto si es necesario */
    }
</style>
<body>
    <!-- Header-->
    <header class="bg-dark py-5">
        <div class="container px-4 px-lg-5 my-5">
            <div class="text-center text-white">
                <h1 class="display-4 fw-bolder">Sistema de Ventas</h1>
                <p class="lead fw-normal text-white-50 mb-0">Productos de la finca</p>
            </div>
        </div>
    </header>
    <!-- Section-->
    <div id="unique_id_scroll_section" class="ma-0" style="height:1000px;overflow: auto;">
        <MudPaper Elevation="0" Class="d-flex flex-column justify-space-between py-6">
            <section class="py-5">
                <div class="container px-4 px-lg-5 mt-5">
                    <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-content-center">
                        @foreach (var item in inventario)
                        {

                            <div class="col mb-5">
                                <MudCard>
                                    <MudCardMedia Image="https://picsum.photos/200/300?random=1" Height="200" />
                                    <MudCardContent style="height: 100px;">
                                        <MudText Typo="Typo.h5">@item.NombreArticulo</MudText>
                                        <MudText Typo="Typo.body2">@item.descripcion</MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="@( () => Vender(item.IdInventario, item) )">Comprar</MudButton>
                                        <MudButton Variant="Variant.Text" Disabled Color="Color.Primary">Cantidad: @item.Cantidad</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </div>

                        }
                    </div>
                </div>
            </section>
            <MudScrollToTop TopOffset="100"
                            OnScroll="OnScroll"
                            Selector="#unique_id_scroll_section"
                            VisibleCssClass="visible absolute"
                            HiddenCssClass="invisible">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color">Go to top</MudButton>
            </MudScrollToTop>
        </MudPaper>
    </div>
</body>
</html>

@code {
    private List<Inventario> inventario = new List<Inventario>();
    Color Color = Color.Success;
    protected override async Task OnInitializedAsync()
    {
        var url = "https://vacas20231113212142.azurewebsites.net/Inventario";
        inventario = await inventarioService.ObtenerElementos(url);
    }
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }

    private async Task Vender(String id,Inventario model)
    {
        model.Cantidad = model.Cantidad - 1;
        int result = await inventarioService.ActualizarDatos(id, model);
        if (result == 200)
        {
            SnackbarService.Add<MudChip>(new Dictionary<string, object>() {
                    { "Text", "Venta exitosa." },
                    { "Color", Color.Success } });
        }
        else
        {
            SnackbarService.Add<MudChip>(new Dictionary<string, object>() {
                    { "Text", "Ha ocurrido un error al vender." },
                    { "Color", Color.Error } });
        }
    }
}
